from setuptools import setup
from setuptools.extension import Extension
from Cython.Distutils import build_ext

def appendCMakeList(list, var): 
    if var != "": 
        list.extend(var.split(';'))
   

# Remove the "-Wstrict-prototypes" compiler option, which isn't valid for C++.
import distutils.sysconfig
cfg_vars = distutils.sysconfig.get_config_vars()
if "CFLAGS" in cfg_vars:
       cfg_vars["CFLAGS"] = cfg_vars["CFLAGS"].replace("-Wstrict-prototypes", "")


LIBRARIES=['dynet']
LIBRARY_DIRS=["."]

if "${MSVC}"=="1":
    COMPILER_ARGS=["-DNOMINMAX", "/EHsc"]
    DYNET_LIB_DIR="${PROJECT_BINARY_DIR}/dynet/Release/"
    RUNTIME_LIB_DIRS=[]
    # For MSVC, we compile dynet as a static lib, so we need to also link in the
    # other libraries it depends on:
    appendCMakeList(LIBRARIES, '${LIBS}'.replace('.lib', ''))  # Remove .lib extension from compiler lib
    appendCMakeList(LIBRARY_DIRS, '${MKL_LINK_DIRS}')    # Add the MKL dirs, if MKL is being used
    # Boost does auto-linking in MSVC, just point to the right directory:
    appendCMakeList(LIBRARY_DIRS, '${Boost_LIBRARY_DIRS}')
else:
    COMPILER_ARGS=["-std=c++11"]
    DYNET_LIB_DIR="${PROJECT_BINARY_DIR}/dynet/"
    RUNTIME_LIB_DIRS=[DYNET_LIB_DIR]

LIBRARY_DIRS.append(DYNET_LIB_DIR)
GPULIBRARIES=['gdynet','dynetcuda','cublas']
GPULIBRARY_DIRS=list(LIBRARY_DIRS)              # make a copy
GPULIBRARY_DIRS.append("${CUDA_CUBLAS_LIB}")

import platform

# in some OSX systems, the following extra flags are needed:
if platform.system() == 'Darwin':
    COMPILER_ARGS.extend(["-stdlib=libc++","-mmacosx-version-min=10.7"])


ext_cpu = Extension(
        "_dynet",                 # name of extension
        ["dynet.pyx"],           # filename of our Pyrex/Cython source
        language="c++",              # this causes Pyrex/Cython to create C++ source
        include_dirs=["${PROJECT_SOURCE_DIR}", # this is the location of the main dynet directory.
                      "${EIGEN3_INCLUDE_DIR}", # this is the directory where eigen is saved.
                      "${Boost_INCLUDE_DIR}"], # this is the directory where boost is.
        libraries=LIBRARIES,             # ditto
        library_dirs=LIBRARY_DIRS,
        #extra_link_args=["-L/home/yogo/Vork/Research/dynet/dynet/build/dynet"],       # if needed
        extra_compile_args=COMPILER_ARGS,
        runtime_library_dirs=RUNTIME_LIB_DIRS,
        )

ext_gpu = Extension(
        "_gdynet",                 # name of extension
        ["gdynet.pyx"],           # filename of our Pyrex/Cython source
        language="c++",              # this causes Pyrex/Cython to create C++ source
        include_dirs=["${PROJECT_SOURCE_DIR}", # this is the location of the main dynet directory.
                      "${EIGEN3_INCLUDE_DIR}", # this is the directory where eigen is saved.
                      "${Boost_INCLUDE_DIR}"], # this is the directory where boost is.
        libraries=GPULIBRARIES,             # ditto
        library_dirs=GPULIBRARY_DIRS,
        #extra_link_args=["-L/home/yogo/Vork/Research/dynet/dynet/build/dynet"],       # if needed
        extra_compile_args=COMPILER_ARGS,
        #runtime_library_dirs=RUNTIME_LIB_DIRS,
        )

TARGET = [ext_cpu]

if "${WITH_CUDA_BACKEND}"=="1": # if cuda requested
    TARGET.append(ext_gpu)

setup(ext_modules = TARGET,
        cmdclass = {'build_ext': build_ext},
        name="dyNET",
        py_modules = ['dynet','dynet_viz'],
)
