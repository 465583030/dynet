<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="training_8h" kind="file" language="C++">
    <compoundname>training.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">boost/serialization/export.hpp</includes>
    <includes local="yes">dynet/model.h</includes>
    <includes local="yes">dynet/shadow-params.h</includes>
    <incdepgraph>
      <node id="7">
        <label>boost/serialization/export.hpp</label>
      </node>
      <node id="8">
        <label>dynet/model.h</label>
      </node>
      <node id="5">
        <label>/home/paul/dev/dynet/dynet/training.h</label>
        <link refid="training.h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>dynet/shadow-params.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structdynet_1_1Trainer" prot="public">dynet::Trainer</innerclass>
    <innerclass refid="structdynet_1_1SimpleSGDTrainer" prot="public">dynet::SimpleSGDTrainer</innerclass>
    <innerclass refid="structdynet_1_1MomentumSGDTrainer" prot="public">dynet::MomentumSGDTrainer</innerclass>
    <innerclass refid="structdynet_1_1AdagradTrainer" prot="public">dynet::AdagradTrainer</innerclass>
    <innerclass refid="structdynet_1_1AdadeltaTrainer" prot="public">dynet::AdadeltaTrainer</innerclass>
    <innerclass refid="structdynet_1_1RmsPropTrainer" prot="public">dynet::RmsPropTrainer</innerclass>
    <innerclass refid="structdynet_1_1AdamTrainer" prot="public">dynet::AdamTrainer</innerclass>
    <innernamespace refid="namespacedynet">dynet</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="training_8h_1a17e619658ad5e6b8b156fb98a3596f84" prot="public" static="no">
        <name>DYNET_TRAINER_DEFINE_DEV_IMPL</name>
        <param></param>
        <initializer>void update_params(real scale, real gscale, size_t idx) override; \
  void update_lookup_params(real scale, real gscale, size_t idx, size_t lidx) override; \
  template &lt;class MyDevice&gt; \
  void update_rule_dev(const MyDevice &amp; dev, real scale, real gscale, const std::vector&lt;Tensor*&gt; &amp; values); \
  void update_rule(real scale, real gscale, const std::vector&lt;Tensor*&gt; &amp; values) override;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/paul/dev/dynet/dynet/training.h" line="11" column="9" bodyfile="/home/paul/dev/dynet/dynet/training.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DYNET_TRAINING_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNET_TRAINING_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/serialization/export.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dynet/model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dynet/shadow-params.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()<sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/>void<sp/>update_params(real<sp/>scale,<sp/>real<sp/>gscale,<sp/>size_t<sp/>idx)<sp/>override;<sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/>void<sp/>update_lookup_params(real<sp/>scale,<sp/>real<sp/>gscale,<sp/>size_t<sp/>idx,<sp/>size_t<sp/>lidx)<sp/>override;<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;class<sp/>MyDevice&gt;<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/>void<sp/>update_rule_dev(const<sp/>MyDevice<sp/>&amp;<sp/>dev,<sp/>real<sp/>scale,<sp/>real<sp/>gscale,<sp/>const<sp/>std::vector&lt;Tensor*&gt;<sp/>&amp;<sp/>values);<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/>void<sp/>update_rule(real<sp/>scale,<sp/>real<sp/>gscale,<sp/>const<sp/>std::vector&lt;Tensor*&gt;<sp/>&amp;<sp/>values)<sp/>override;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynet" kindref="compound">dynet</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structdynet_1_1Trainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(Model*<sp/>m,<sp/>real<sp/>e0)<sp/>:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>eta0(e0),<sp/>eta(e0),<sp/>eta_decay(),<sp/>epoch(),<sp/>clipping_enabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>clip_threshold(5),<sp/>clips(),<sp/>updates(),<sp/>aux_allocated(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>model(m)<sp/>{}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update(real<sp/>scale<sp/>=<sp/>1.0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_epoch(real<sp/>r<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>epoch<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>eta<sp/>=<sp/>eta0<sp/>/<sp/>(1<sp/>+<sp/>epoch<sp/>*<sp/>eta_decay);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>clipping<sp/>is<sp/>enabled<sp/>and<sp/>the<sp/>gradient<sp/>is<sp/>too<sp/>big,<sp/>return<sp/>the<sp/>amount<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>the<sp/>gradient<sp/>by<sp/>(otherwise<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clip_gradients();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>This<sp/>is<sp/>unprotected<sp/>temporarily<sp/>until<sp/>there<sp/>is<sp/>a<sp/>better<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>serializing<sp/>the<sp/>weight<sp/>decay<sp/>when<sp/>saving<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rescale<sp/>all<sp/>the<sp/>parameters<sp/>handled<sp/>by<sp/>this<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rescale_and_reset_weight_decay();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>learning<sp/>rates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>real<sp/>eta0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>real<sp/>eta;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>real<sp/>eta_decay;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>real<sp/>epoch;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>real<sp/>clipping_enabled;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>real<sp/>clip_threshold;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>real<sp/>clips;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>real<sp/>updates;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aux_allocated;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>status()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[epoch=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>epoch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>eta=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>clips=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>clips<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>updates=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>updates<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>updates<sp/>=<sp/>clips<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>Model*<sp/>model;<sp/><sp/></highlight><highlight class="comment">//<sp/>parameters<sp/>and<sp/>gradients<sp/>live<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_impl()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_rule(real<sp/>scale,<sp/>real<sp/>gscale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Tensor*&gt;<sp/>&amp;<sp/>values)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_params(real<sp/>scale,<sp/>real<sp/>gscale,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_lookup_params(real<sp/>scale,<sp/>real<sp/>gscale,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lidx)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structdynet_1_1SimpleSGDTrainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1SimpleSGDTrainer" kindref="compound">SimpleSGDTrainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1SimpleSGDTrainer" kindref="compound">SimpleSGDTrainer</ref>(Model*<sp/>m,<sp/>real<sp/>e0<sp/>=<sp/>0.1)<sp/>:<sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(m,<sp/>e0)<sp/>{}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1SimpleSGDTrainer" kindref="compound">SimpleSGDTrainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structdynet_1_1MomentumSGDTrainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1MomentumSGDTrainer" kindref="compound">MomentumSGDTrainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1MomentumSGDTrainer" kindref="compound">MomentumSGDTrainer</ref>(Model*<sp/>m,<sp/>real<sp/>e0<sp/>=<sp/>0.01,<sp/>real<sp/>mom<sp/>=<sp/>0.9)<sp/>:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(m,<sp/>e0),<sp/>momentum(mom)<sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_impl()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>real<sp/>momentum;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>represent<sp/>the<sp/>current<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowParameters&gt;<sp/>vp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowLookupParameters&gt;<sp/>vlp;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::unordered_map&lt;ParameterStorage*,<sp/>Tensor&gt;<sp/>vp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::unordered_map&lt;LookupParameterStorage*,<sp/>std::unordered_map&lt;unsigned,<sp/>Tensor&gt;&gt;<sp/>vl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1MomentumSGDTrainer" kindref="compound">MomentumSGDTrainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structdynet_1_1AdagradTrainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1AdagradTrainer" kindref="compound">AdagradTrainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1AdagradTrainer" kindref="compound">AdagradTrainer</ref>(Model*<sp/>m,<sp/>real<sp/>e0<sp/>=<sp/>0.1,<sp/>real<sp/>eps<sp/>=<sp/>1e-20)<sp/>:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(m,<sp/>e0),<sp/>epsilon(eps)<sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_impl()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>real<sp/>epsilon;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowParameters&gt;<sp/>vp;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowLookupParameters&gt;<sp/>vlp;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1AdagradTrainer" kindref="compound">AdagradTrainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structdynet_1_1AdadeltaTrainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1AdadeltaTrainer" kindref="compound">AdadeltaTrainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1AdadeltaTrainer" kindref="compound">AdadeltaTrainer</ref>(Model*<sp/>m,<sp/>real<sp/>eps<sp/>=<sp/>1e-6,<sp/>real<sp/>rho<sp/>=<sp/>0.95)<sp/>:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(m,<sp/>1.0),<sp/>epsilon(eps),<sp/>rho(rho)<sp/>{}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_impl()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>real<sp/>epsilon;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>real<sp/>rho;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowParameters&gt;<sp/>hg;<sp/></highlight><highlight class="comment">//<sp/>History<sp/>of<sp/>gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowLookupParameters&gt;<sp/>hlg;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowParameters&gt;<sp/>hd;<sp/></highlight><highlight class="comment">//<sp/>History<sp/>of<sp/>deltas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowLookupParameters&gt;<sp/>hld;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1AdadeltaTrainer" kindref="compound">AdadeltaTrainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="structdynet_1_1RmsPropTrainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1RmsPropTrainer" kindref="compound">RmsPropTrainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1RmsPropTrainer" kindref="compound">RmsPropTrainer</ref>(Model*<sp/>m,<sp/>real<sp/>e0<sp/>=<sp/>0.1,<sp/>real<sp/>eps<sp/>=<sp/>1e-20,<sp/>real<sp/>rho<sp/>=<sp/>0.95)<sp/>:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(m,<sp/>e0),<sp/>epsilon(eps),<sp/>rho(rho)<sp/>{}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_impl()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>real<sp/>epsilon;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>real<sp/>rho;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>std::vector&lt;real&gt;<sp/>hg;<sp/></highlight><highlight class="comment">//<sp/>History<sp/>of<sp/>gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;real&gt;<sp/>&gt;<sp/>hlg;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1RmsPropTrainer" kindref="compound">RmsPropTrainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structdynet_1_1AdamTrainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1AdamTrainer" kindref="compound">AdamTrainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1AdamTrainer" kindref="compound">AdamTrainer</ref>(Model*<sp/>m,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>0.001,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta_1<sp/>=<sp/>0.9,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta_2<sp/>=<sp/>0.999,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>1e-8)<sp/>:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdynet_1_1Trainer" kindref="compound">Trainer</ref>(m,<sp/>alpha),<sp/>beta_1(beta_1),<sp/>beta_2(beta_2),<sp/>epsilon(eps)<sp/>{}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>DYNET_TRAINER_DEFINE_DEV_IMPL()</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_impl()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta_1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta_2;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowParameters&gt;<sp/>m;<sp/></highlight><highlight class="comment">//<sp/>History<sp/>of<sp/>gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowLookupParameters&gt;<sp/>lm;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowParameters&gt;<sp/>v;<sp/></highlight><highlight class="comment">//<sp/>History<sp/>of<sp/>deltas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::vector&lt;ShadowLookupParameters&gt;<sp/>lv;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1AdamTrainer" kindref="compound">AdamTrainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::serialization::access;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serialize(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dynet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">BOOST_CLASS_EXPORT_KEY(<ref refid="structdynet_1_1SimpleSGDTrainer" kindref="compound">dynet::SimpleSGDTrainer</ref>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">BOOST_CLASS_EXPORT_KEY(<ref refid="namespacedynet" kindref="compound">dynet</ref>::MomentumSGDTrainer)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">BOOST_CLASS_EXPORT_KEY(<ref refid="namespacedynet" kindref="compound">dynet</ref>::AdagradTrainer)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">BOOST_CLASS_EXPORT_KEY(<ref refid="namespacedynet" kindref="compound">dynet</ref>::AdadeltaTrainer)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">BOOST_CLASS_EXPORT_KEY(<ref refid="namespacedynet" kindref="compound">dynet</ref>::RmsPropTrainer)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">BOOST_CLASS_EXPORT_KEY(<ref refid="namespacedynet" kindref="compound">dynet</ref>::AdamTrainer)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/paul/dev/dynet/dynet/training.h"/>
  </compounddef>
</doxygen>
