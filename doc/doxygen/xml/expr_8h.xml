<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="expr_8h" kind="file" language="C++">
    <compoundname>expr.h</compoundname>
    <includes local="yes">dynet/dynet.h</includes>
    <includes local="yes">dynet/nodes.h</includes>
    <includes local="yes">dynet/nodes-contract.h</includes>
    <incdepgraph>
      <node id="1">
        <label>dynet/dynet.h</label>
      </node>
      <node id="2">
        <label>dynet/nodes.h</label>
      </node>
      <node id="3">
        <label>dynet/nodes-contract.h</label>
      </node>
      <node id="0">
        <label>/home/paul/dev/dynet/dynet/expr.h</label>
        <link refid="expr.h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structdynet_1_1expr_1_1Expression" prot="public">dynet::expr::Expression</innerclass>
    <innernamespace refid="namespacedynet">dynet</innernamespace>
    <innernamespace refid="namespacedynet_1_1expr">dynet::expr</innernamespace>
    <innernamespace refid="namespacedynet_1_1expr_1_1detail">dynet::expr::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DYNET_EXPR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNET_EXPR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dynet/dynet.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dynet/nodes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dynet/nodes-contract.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynet" kindref="compound">dynet</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">expr<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="structdynet_1_1expr_1_1Expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>ComputationGraph<sp/>*pg;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>VariableIndex<sp/>i;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>()<sp/>:<sp/>pg(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>(ComputationGraph<sp/>*pg,<sp/>VariableIndex<sp/>i)<sp/>:<sp/>pg(pg),<sp/>i(i)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pg-&gt;get_value(i);<sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal">};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>input(ComputationGraph&amp;<sp/>g,<sp/>real<sp/>s);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>input(ComputationGraph&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>real<sp/>*ps);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>input(ComputationGraph&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dim&amp;<sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/>data);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>input(ComputationGraph&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dim&amp;<sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;*<sp/>pdata);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>input(ComputationGraph&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dim&amp;<sp/>d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>ids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>defdata<sp/>=<sp/>0.f);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>parameter(ComputationGraph&amp;<sp/>g,<sp/>Parameter<sp/>p);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>const_parameter(ComputationGraph&amp;<sp/>g,<sp/>Parameter<sp/>p);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>pindex);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>const_lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>const_lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>pindex);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Batched<sp/>versions<sp/>of<sp/>lookup<sp/>and<sp/>const_lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>indices);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;*<sp/>pindices);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>const_lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>indices);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>const_lookup(ComputationGraph&amp;<sp/>g,<sp/>LookupParameter<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;*<sp/>pindices);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>zeroes(ComputationGraph&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dim&amp;<sp/>d);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>functions<sp/>for<sp/>controlling<sp/>flow<sp/>of<sp/>information<sp/>in<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>nobackprop(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x,<sp/>real<sp/>y);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator+(real<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator-(real<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x,<sp/>real<sp/>y);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref><sp/>operator*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdynet_1_1expr_1_1Expression" kindref="compound">Expression</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>(1.f<sp/>/<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>colwise<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">Expression<sp/>addmv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>v);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>componentwise<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">Expression<sp/>cdiv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">Expression<sp/>colwise_add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>bias);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>z_ij<sp/>=<sp/>x_ijk<sp/>*<sp/>y_k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">Expression<sp/>contract3d_1d(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>z_i<sp/>=<sp/>x_ijk<sp/>*<sp/>y_k<sp/>*<sp/>z_j<sp/>(+<sp/>b_i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">Expression<sp/>contract3d_1d_1d(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>z);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">Expression<sp/>contract3d_1d_1d(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>b);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>z_ij<sp/>=<sp/>x_ijk<sp/>*<sp/>y_k<sp/>+<sp/>b_ij</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">Expression<sp/>contract3d_1d(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>b);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">Expression<sp/>sqrt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">Expression<sp/>erf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">Expression<sp/>tanh(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">Expression<sp/>exp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">Expression<sp/>square(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">Expression<sp/>cube(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">Expression<sp/>lgamma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">Expression<sp/>log(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">Expression<sp/>logistic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">Expression<sp/>rectify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">Expression<sp/>hinge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1.0);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">Expression<sp/>hinge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>&amp;<sp/>indices,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1.0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">Expression<sp/>hinge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>pindex,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1.0);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">Expression<sp/>hinge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>*<sp/>pindices,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1.0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">Expression<sp/>log_softmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">Expression<sp/>sparsemax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">Expression<sp/>log_softmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>restriction);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">Expression<sp/>sparsemax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">Expression<sp/>sparsemax_loss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>target_support);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">Expression<sp/>sparsemax_loss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;*<sp/>ptarget_support);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">Expression<sp/>softmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">Expression<sp/>softsign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">Expression<sp/>pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">Expression<sp/>min(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">Expression<sp/>max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">Expression<sp/>noise(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/>real<sp/>stddev);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">Expression<sp/>dropout(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/>real<sp/>p);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">Expression<sp/>block_dropout(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/>real<sp/>p);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reshape::forward<sp/>is<sp/>O(1),<sp/>but<sp/>backward<sp/>is<sp/>O(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">Expression<sp/>reshape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dim&amp;<sp/>d);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transpose<sp/>requires<sp/>O(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">Expression<sp/>transpose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">Expression<sp/>select_rows(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>rows);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">Expression<sp/>select_rows(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;*<sp/>prows);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>select_cols<sp/>is<sp/>more<sp/>efficient<sp/>than<sp/>select_rows<sp/>since<sp/>Eigen<sp/>uses<sp/>column-major<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">Expression<sp/>select_cols(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;&amp;<sp/>cols);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">Expression<sp/>select_cols(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;*<sp/>pcols);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matrix<sp/>inverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">Expression<sp/>inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">Expression<sp/>logdet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">Expression<sp/>trace_of_product(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">Expression<sp/>cwise_multiply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">Expression<sp/>squared_norm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">Expression<sp/>dot_product(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">Expression<sp/>squared_distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">Expression<sp/>huber_distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>1.345f);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">Expression<sp/>l1_distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">Expression<sp/>binary_log_loss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">Expression<sp/>pairwise_rank_loss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>y,<sp/>real<sp/>m=1.0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">Expression<sp/>poisson_loss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">Expression<sp/>poisson_loss(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*<sp/>py);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>various<sp/>convolutiony<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">Expression<sp/>conv1d_narrow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>f);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">Expression<sp/>conv1d_wide(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>f);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">Expression<sp/>filter1d_narrow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>f);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">Expression<sp/>kmax_pooling(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">Expression<sp/>fold_rows(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nrows=2);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">Expression<sp/>sum_cols(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">Expression<sp/>average_cols(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">Expression<sp/>kmh_ngram(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sum<sp/>the<sp/>results<sp/>of<sp/>multiple<sp/>batches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">Expression<sp/>sum_batches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pick<sp/>parts<sp/>out<sp/>of<sp/>bigger<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">Expression<sp/>pick(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">Expression<sp/>pick(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">Expression<sp/>pick(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*<sp/>pv);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">Expression<sp/>pick(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>*<sp/>pv);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">Expression<sp/>pickrange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">Expression<sp/>pickneglogsoftmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">Expression<sp/>pickneglogsoftmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">Expression<sp/>pickneglogsoftmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*<sp/>pv);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">Expression<sp/>pickneglogsoftmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expression&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>*<sp/>pv);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>Expression<sp/>f(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputationGraph<sp/>*pg<sp/>=<sp/>xs.begin()-&gt;pg;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VariableIndex&gt;<sp/>xis(xs.size());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xi<sp/>=<sp/>xs.begin();<sp/>xi<sp/>!=<sp/>xs.end();<sp/>++xi)<sp/>xis[i++]<sp/>=<sp/>xi-&gt;i;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expression(pg,<sp/>pg-&gt;add_function&lt;F&gt;(xis));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>logsumexp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;LogSumExp&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>logsumexp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;LogSumExp&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>sum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Sum&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>sum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Sum&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Max&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Max&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>average(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Average&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>average(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Average&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>concatenate_cols(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;ConcatenateColumns&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>concatenate_cols(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;ConcatenateColumns&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>concatenate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Concatenate&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>concatenate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;Concatenate&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>affine_transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;AffineTransform&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expression<sp/>affine_transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Expression&gt;&amp;<sp/>xs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::f&lt;AffineTransform&gt;(xs);<sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/paul/dev/dynet/dynet/expr.h"/>
  </compounddef>
</doxygen>
